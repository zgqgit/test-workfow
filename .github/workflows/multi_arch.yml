name: MULTI_ARCH_CI

on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - "arch.v*"

env:
  DOCKERHUB_REPO: dataelement/
  
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build_arm_image:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v2
      - name: Get version
        id: get_version
        run: |
          echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
      
      - name: Set Environment Variable
        run: echo "RELEASE_VERSION=${{ steps.get_version.outputs.VERSION }}" >> $GITHUB_ENV

      # 登录 docker hub
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          # GitHub Repo => Settings => Secrets 增加 docker hub 登录密钥信息
          # DOCKERHUB_USERNAME 是 docker hub 账号名.
          # DOCKERHUB_TOKEN: docker hub => Account Setting => Security 创建.
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build backend arm64 and push
        id: docker_build_backend_arm
        run: |
          docker buildx build --build-arg PANDOC_ARCH=arm64 --file ./src/backend/arch.Dockerfile --platform linux/arm64 --provenance false --tag ${{ env.DOCKERHUB_REPO }}test:${{ steps.get_version.outputs.VERSION }}-arm64 --push ./src/backend/

      # - name: Build backend arm64 and push
      #   id: docker_build_backend_arm
      #   uses: docker/build-push-action@v2
      #   with:
      #     # backend 的context目录
      #     context: "./src/backend/"
      #     file: ./src/backend/arch.Dockerfile
      #     # 是否 docker push
      #     push: true
      #     # 打出manifest 而不是manifest list
      #     provenance: false
      #     # docker build arg, 注入 APP_NAME/APP_VERSION
      #     platforms: linux/arm64
      #     build-args: |
      #       APP_NAME="bisheng-backend"
      #       APP_VERSION=${{ steps.get_version.outputs.VERSION }}
      #       PANDOC_ARCH=arm64
      #     # 生成两个 docker tag: ${APP_VERSION} 和 latest
      #     tags: |
      #       ${{ env.DOCKERHUB_REPO }}test:${{ steps.get_version.outputs.VERSION }}-arm64
  build_amd_image:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v2
      - name: Get version
        id: get_version
        run: |
          echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
      
      - name: Set Environment Variable
        run: echo "RELEASE_VERSION=${{ steps.get_version.outputs.VERSION }}" >> $GITHUB_ENV

      # 登录 docker hub
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          # GitHub Repo => Settings => Secrets 增加 docker hub 登录密钥信息
          # DOCKERHUB_USERNAME 是 docker hub 账号名.
          # DOCKERHUB_TOKEN: docker hub => Account Setting => Security 创建.
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build backend amd64 and push
        id: docker_build_backend_amd
        run: |
          docker buildx build --build-arg PANDOC_ARCH=amd64 --file ./src/backend/arch.Dockerfile --platform linux/amd64 --provenance false --tag ${{ env.DOCKERHUB_REPO }}test:${{ steps.get_version.outputs.VERSION }}-amd64 --push ./src/backend/

      # - name: Build backend amd64 and push
      #   id: docker_build_backend_amd
      #   uses: docker/build-push-action@v2
      #   with:
      #     # backend 的context目录
      #     context: "./src/backend/"
      #     file: ./src/backend/arch.Dockerfile
      #     # 是否 docker push
      #     push: true
      #     # 打出manifest 而不是manifest list
      #     provenance: false
      #     # docker build arg, 注入 APP_NAME/APP_VERSION
      #     platforms: linux/amd64
      #     build-args: |
      #       APP_NAME="bisheng-backend"
      #       APP_VERSION=${{ steps.get_version.outputs.VERSION }}
      #       PANDOC_ARCH=amd64
      #     # 生成两个 docker tag: ${APP_VERSION} 和 latest
      #     tags: |
      #       ${{ env.DOCKERHUB_REPO }}test:${{ steps.get_version.outputs.VERSION }}-amd64
  combine_two_images:
    runs-on: ubuntu-latest
    needs: 
      - build_arm_image
      - build_amd_image
    steps:
      - name: Get version
        id: get_version
        run: |
          echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
      
      - name: Set Environment Variable
        run: echo "RELEASE_VERSION=${{ steps.get_version.outputs.VERSION }}" >> $GITHUB_ENV

      # 登录 docker hub
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          # GitHub Repo => Settings => Secrets 增加 docker hub 登录密钥信息
          # DOCKERHUB_USERNAME 是 docker hub 账号名.
          # DOCKERHUB_TOKEN: docker hub => Account Setting => Security 创建.
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
  
      - name: set up Docker Buildx
        uses: docker/setup-buildx-action@v3
  
      - name: Combine Two images
        run: |
          docker manifest create ${{ env.DOCKERHUB_REPO }}test:${{ steps.get_version.outputs.VERSION }} ${{ env.DOCKERHUB_REPO }}test:${{ steps.get_version.outputs.VERSION }}-amd64 ${{ env.DOCKERHUB_REPO }}test:${{ steps.get_version.outputs.VERSION }}-arm64
          docker manifest push ${{ env.DOCKERHUB_REPO }}test:${{ steps.get_version.outputs.VERSION }}